{"failedCount":2,"prefixedPath":"classpath:acceptance\/test\/prueba-tecnica.feature","packageQualifiedName":"acceptance.test.prueba-tecnica","loopIndex":-1,"relativePath":"acceptance\/test\/prueba-tecnica.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":165900,"millis":0.1659,"status":"passed"},"step":{"background":true,"line":4,"prefix":"*","index":0,"text":"configure retry = {count: 3, interval: 3000}"}},{"result":{"nanos":5983000,"errorMessage":"js failed:\n>>>>\n01: Java.type('co.cobre.lib.qa.aws.S3Util')\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Access to host class co.cobre.lib.qa.aws.S3Util is not allowed or does not exist.\n- <js>.:program(Unnamed:1)\n\nclasspath:acceptance\/test\/prueba-tecnica.feature:8","millis":5.983,"status":"failed"},"step":{"comments":["# La clase S3Util se encuentra en un gestor de librerías externo al proyecto","# Imaginemos que esta clase contiene la configuración y conexión de un cliente AWS, además los métodos para subir archivos a buckets S3","# También contiene un método para verificar si un archivo se encuentra dentro de un folder"],"background":true,"line":8,"prefix":"*","index":1,"text":"def S3Manager = Java.type('co.cobre.lib.qa.aws.S3Util')"},"stepLog":"16:40:50.642 classpath:acceptance\/test\/prueba-tecnica.feature:8\n* def S3Manager = Java.type('co.cobre.lib.qa.aws.S3Util')\njs failed:\n>>>>\n01: Java.type('co.cobre.lib.qa.aws.S3Util')\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Access to host class co.cobre.lib.qa.aws.S3Util is not allowed or does not exist.\n- <js>.:program(Unnamed:1)\n\nclasspath:acceptance\/test\/prueba-tecnica.feature:8\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"background":true,"line":9,"prefix":"*","index":2,"text":"def S3ManagerInstance = new S3Manager()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"background":true,"line":10,"prefix":"*","index":3,"text":"def SQSManager = karate.callSingle('..\/acceptance\/test\/instances-sqs.js')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"background":true,"line":11,"prefix":"*","index":4,"text":"def waitTime = function(seconds) { java.lang.Thread.sleep(seconds * 1000) }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# La clase FileUtils se encuentra en un gestor de librerías externo al proyecto","# Imaginemos que esta clase contiene métodos para tomar un archivo, renombrarlo y copiarlo en otra ruta"],"background":true,"line":14,"prefix":"*","index":5,"text":"def FileUtils = Java.type('co.cobre.lib.qa.util.FileUtils')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":19,"prefix":"*","index":0,"text":"def bucketName = 'test-automation-qa'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":20,"prefix":"*","index":1,"text":"def folderRecaudoFiles = 'files-to-cash-in'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":21,"prefix":"*","index":2,"text":"def noveltyUuid = java.util.UUID.randomUUID().toString()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":22,"prefix":"*","index":3,"text":"print \"El uuid de la novedad es: \" + noveltyUuid"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":24,"prefix":"*","index":4,"text":"def fileExtension = \".csv\""}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":26,"prefix":"*","index":5,"text":"def fullFileName = noveltyUuid+fileExtension"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":29,"prefix":"*","index":6,"text":"def renameFile = FileUtils.renameFile(currentFilePath, currentFileName, newPathNewFile, noveltyUuid, fileExtension)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":30,"prefix":"*","index":7,"text":"waitTime(3)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":31,"prefix":"*","index":8,"text":"print \"El resultado de renombrar el archivo es: \" + renameFile"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":32,"prefix":"*","index":9,"text":"match renameFile == true"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":35,"prefix":"*","index":10,"text":"print \"El bucket es: \" + bucketName"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":36,"prefix":"*","index":11,"text":"print \"El folder  es: \" + folderRecaudoFiles"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":37,"prefix":"*","index":12,"text":"S3ManagerInstance.uploadFileToBucket(bucketName, folderRecaudoFiles, fullFileName, newPathNewFile)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":38,"prefix":"*","index":13,"text":"waitTime(3)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":41,"prefix":"*","index":14,"text":"def fileExist = S3ManagerInstance.doesFileExist(bucketName, folderRecaudoFiles, fullFileName)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":42,"prefix":"*","index":15,"text":"print \"La existencia del archivo es: \" + fileExist"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":43,"prefix":"*","index":16,"text":"match fileExist == true"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"endLine":53,"comments":["# --------------------------------------------------------------- #"],"line":46,"prefix":"*","docString":"{\n\"fileName\": '#(fullFileName)',\n\"workplacebankCode\": 'TEST01',\n\"bucketName\": '#(bucketName)'\n}","index":17,"text":"def variableMapToReplaceInQueueMessageBody ="}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":54,"prefix":"*","index":18,"text":"SQSManager.sendMessageToQueue('queueEvent.json', 'testing-recaudo-qa.fifo', variableMapToReplaceInQueueMessageBody, 'src\/test\/java\/acceptance\/test\/')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":55,"prefix":"*","index":19,"text":"waitTime(8)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #","# Uso de API REST para obtener información de las novedades"],"line":59,"prefix":"Given","index":20,"text":"url 'https:\/\/test-container-qa.prueba.co\/v1\/entity\/novelties\/'+noveltyUuid+''"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":60,"prefix":"And","index":21,"text":"header X-WorkplaceBankCode = 'TEST01'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":61,"prefix":"And","index":22,"text":"retry until responseStatus == 200 && response.cashInNovelty.status == status && response.cashInNoveltyDetailsCounters.total == total"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":62,"prefix":"When","index":23,"text":"method get"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":63,"prefix":"Then","index":24,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":64,"prefix":"*","index":25,"text":"def totalAmount = response.cashInNovelty.totalAmount"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":65,"prefix":"*","index":26,"text":"def status = response.cashInNovelty.status"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":66,"prefix":"*","index":27,"text":"def totalNovelties = response.cashInNoveltyDetailsCounters.total"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":67,"prefix":"*","index":28,"text":"def validationError = response.cashInNoveltyDetailsCounters.validationError"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":68,"prefix":"*","index":29,"text":"def created = response.cashInNoveltyDetailsCounters.created#    * match totalAmount == '<>'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":69,"prefix":"*","index":30,"text":"match getNovelty.status == 'VALIDATED'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":70,"prefix":"*","index":31,"text":"match getNovelty.totalNovelties == '3'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":71,"prefix":"*","index":32,"text":"match getNovelty.validationError == '0'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":72,"prefix":"*","index":33,"text":"match getNovelty.created == '3'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":73,"prefix":"*","index":34,"text":"waitTime(3)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #","# Uso de API REST para obtener información de las novelty-details"],"line":77,"prefix":"*","index":35,"text":"def dataWithExpectedInformation = karate.read(\"classpath:acceptance\/test\/\" + 'respuestaEsperadaDatosCorrectos.json')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":78,"prefix":"*","index":36,"text":"def pageInt = parseInt('1')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":79,"prefix":"*","index":37,"text":"def sizeInt = parseInt('3')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":80,"prefix":"Given","index":38,"text":"url 'https:\/\/test-container-qa.prueba.co\/v1\/entity\/novelties\/'+noveltyUuid+''+'\/novelty-details'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":81,"prefix":"And","index":39,"text":"header X-WorkplaceBankCode = 'TEST01'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":82,"prefix":"And","index":40,"text":"params {page: '0', size: '100'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":83,"prefix":"And","index":41,"text":"retry until responseStatus == 200 && response.content != []"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":84,"prefix":"When","index":42,"text":"method get"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":85,"prefix":"Then","index":43,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":86,"prefix":"*","index":44,"text":"def content = response.content"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":87,"prefix":"*","index":45,"text":"match getNoveltyDetails.content contains deep dataWithExpectedInformation"}}],"line":91,"description":"","durationMillis":6.1489,"failed":true,"error":"js failed:\n>>>>\n01: Java.type('co.cobre.lib.qa.aws.S3Util')\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Access to host class co.cobre.lib.qa.aws.S3Util is not allowed or does not exist.\n- <js>.:program(Unnamed:1)\n\nclasspath:acceptance\/test\/prueba-tecnica.feature:8","tags":["regression"],"executorName":"main","name":"Dado que se carga un archivo de recaudo con datos correctamente con usuarios que recibirán un link de pago, al procesarse el archivo se persisten en BD los recaudo creados exitosamente","startTime":1752356450635,"refId":"[1.1:91]","endTime":1752356450642,"exampleData":{"clientCode":"TEST01","pathJsonFileSqsEvents":"src\/test\/java\/acceptance\/test\/","jsonFileSqsEvents":"queueEvent.json","currentFilePath":"src\/test\/java\/acceptance\/test\/","currentFileName":"recaudoTemplateDatosCorrectos.csv","newPathNewFile":"src\/test\/resources\/testFilesToUse\/","pathJsonDataWithExpectedInformation":"src\/test\/java\/acceptance\/test\/","jsonDataWithExpectedInformation":"respuestaEsperadaDatosCorrectos.json","noveltyStatus":"VALIDATED","registerTotal":"3","validationErrorNumber":"'0'","createdNumber":"'3'","page":"1","size":"3"},"exampleIndex":0},{"sectionIndex":1,"stepResults":[{"result":{"nanos":145200,"millis":0.1452,"status":"passed"},"step":{"background":true,"line":4,"prefix":"*","index":0,"text":"configure retry = {count: 3, interval: 3000}"}},{"result":{"nanos":2513800,"errorMessage":"js failed:\n>>>>\n01: Java.type('co.cobre.lib.qa.aws.S3Util')\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Access to host class co.cobre.lib.qa.aws.S3Util is not allowed or does not exist.\n- <js>.:program(Unnamed:1)\n\nclasspath:acceptance\/test\/prueba-tecnica.feature:8","millis":2.5138,"status":"failed"},"step":{"comments":["# La clase S3Util se encuentra en un gestor de librerías externo al proyecto","# Imaginemos que esta clase contiene la configuración y conexión de un cliente AWS, además los métodos para subir archivos a buckets S3","# También contiene un método para verificar si un archivo se encuentra dentro de un folder"],"background":true,"line":8,"prefix":"*","index":1,"text":"def S3Manager = Java.type('co.cobre.lib.qa.aws.S3Util')"},"stepLog":"16:40:50.650 classpath:acceptance\/test\/prueba-tecnica.feature:8\n* def S3Manager = Java.type('co.cobre.lib.qa.aws.S3Util')\njs failed:\n>>>>\n01: Java.type('co.cobre.lib.qa.aws.S3Util')\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Access to host class co.cobre.lib.qa.aws.S3Util is not allowed or does not exist.\n- <js>.:program(Unnamed:1)\n\nclasspath:acceptance\/test\/prueba-tecnica.feature:8\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"background":true,"line":9,"prefix":"*","index":2,"text":"def S3ManagerInstance = new S3Manager()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"background":true,"line":10,"prefix":"*","index":3,"text":"def SQSManager = karate.callSingle('..\/acceptance\/test\/instances-sqs.js')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"background":true,"line":11,"prefix":"*","index":4,"text":"def waitTime = function(seconds) { java.lang.Thread.sleep(seconds * 1000) }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# La clase FileUtils se encuentra en un gestor de librerías externo al proyecto","# Imaginemos que esta clase contiene métodos para tomar un archivo, renombrarlo y copiarlo en otra ruta"],"background":true,"line":14,"prefix":"*","index":5,"text":"def FileUtils = Java.type('co.cobre.lib.qa.util.FileUtils')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":96,"prefix":"*","index":0,"text":"def bucketName = 'test-automation-qa'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":97,"prefix":"*","index":1,"text":"def folderRecaudoFiles = 'files-to-cash-in'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":98,"prefix":"*","index":2,"text":"def noveltyUuid = java.util.UUID.randomUUID().toString()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":99,"prefix":"*","index":3,"text":"print \"El uuid de la novedad es: \" + noveltyUuid"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":101,"prefix":"*","index":4,"text":"def fileExtension = \".csv\""}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":103,"prefix":"*","index":5,"text":"def fullFileName = noveltyUuid+fileExtension"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":106,"prefix":"*","index":6,"text":"def renameFile = FileUtils.renameFile(currentFilePath, currentFileName, newPathNewFile, noveltyUuid, fileExtension)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":107,"prefix":"*","index":7,"text":"waitTime(3)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":108,"prefix":"*","index":8,"text":"print \"El resultado de renombrar el archivo es: \" + renameFile"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":109,"prefix":"*","index":9,"text":"match renameFile == true"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":112,"prefix":"*","index":10,"text":"print \"El bucket es: \" + bucketName"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":113,"prefix":"*","index":11,"text":"print \"El folder  es: \" + folderConvertedFiles"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":114,"prefix":"*","index":12,"text":"S3ManagerInstance.uploadFileToBucket(bucketName, folderRecaudoFiles, fullFileName, newPathNewFile)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":115,"prefix":"*","index":13,"text":"waitTime(3)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #"],"line":118,"prefix":"*","index":14,"text":"def fileExist = S3ManagerInstance.doesFileExist(bucketName, folderRecaudoFiles, fullFileName)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":119,"prefix":"*","index":15,"text":"print \"La existencia del archivo es: \" + fileExist"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":120,"prefix":"*","index":16,"text":"match fileExist == true"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"endLine":130,"comments":["# --------------------------------------------------------------- #"],"line":123,"prefix":"*","docString":"{\n\"fileName\": '#(fullFileName)',\n\"workplacebankCode\": 'TEST01',\n\"bucketName\": '#(bucketName)'\n}","index":17,"text":"def variableMapToReplaceInQueueMessageBody ="}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":131,"prefix":"*","index":18,"text":"SQSManager.sendMessageToQueue('queueEvent.json', 'testing-recaudo-qa.fifo', variableMapToReplaceInQueueMessageBody, 'src\/test\/java\/acceptance\/test\/')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":132,"prefix":"*","index":19,"text":"waitTime(8)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #","# Uso de API REST para obtener información de las novedades"],"line":136,"prefix":"Given","index":20,"text":"url 'https:\/\/test-container-qa.prueba.co\/v1\/entity\/novelties\/'+noveltyUuid+''"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":137,"prefix":"And","index":21,"text":"header X-WorkplaceBankCode = 'TEST01'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":138,"prefix":"And","index":22,"text":"retry until responseStatus == 200 && response.cashInNovelty.status == status && response.cashInNoveltyDetailsCounters.total == total"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":139,"prefix":"When","index":23,"text":"method get"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":140,"prefix":"Then","index":24,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":141,"prefix":"*","index":25,"text":"def totalAmount = response.cashInNovelty.totalAmount"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":142,"prefix":"*","index":26,"text":"def status = response.cashInNovelty.status"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":143,"prefix":"*","index":27,"text":"def totalNovelties = response.cashInNoveltyDetailsCounters.total"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":144,"prefix":"*","index":28,"text":"def validationError = response.cashInNoveltyDetailsCounters.validationError"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":145,"prefix":"*","index":29,"text":"def created = response.cashInNoveltyDetailsCounters.created#    * match totalAmount == '<>'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":146,"prefix":"*","index":30,"text":"match getNovelty.status == 'VALIDATED'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":147,"prefix":"*","index":31,"text":"match getNovelty.totalNovelties == '2'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":148,"prefix":"*","index":32,"text":"match getNovelty.validationError == '2'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":149,"prefix":"*","index":33,"text":"match getNovelty.created == '0'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":150,"prefix":"*","index":34,"text":"waitTime(3)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# --------------------------------------------------------------- #","# Uso de API REST para obtener información de las novelty-details"],"line":154,"prefix":"*","index":35,"text":"def dataWithExpectedInformation = karate.read(\"classpath:acceptance\/test\/\" + 'respuestaEsperadaCaracteresEspeciales.json')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":155,"prefix":"*","index":36,"text":"def pageInt = parseInt('1')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":156,"prefix":"*","index":37,"text":"def sizeInt = parseInt('2')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":157,"prefix":"Given","index":38,"text":"url 'https:\/\/test-container-qa.prueba.co\/v1\/entity\/novelties\/'+noveltyUuid+''+'\/novelty-details'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":158,"prefix":"And","index":39,"text":"header X-WorkplaceBankCode = 'TEST01'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":159,"prefix":"And","index":40,"text":"params {page: '0', size: '100'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":160,"prefix":"And","index":41,"text":"retry until responseStatus == 200 && response.content != []"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":161,"prefix":"When","index":42,"text":"method get"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":162,"prefix":"Then","index":43,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":163,"prefix":"*","index":44,"text":"def content = response.content"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":164,"prefix":"*","index":45,"text":"match getNoveltyDetails.content contains deep dataWithExpectedInformation"}}],"line":168,"description":"","durationMillis":2.659,"failed":true,"error":"js failed:\n>>>>\n01: Java.type('co.cobre.lib.qa.aws.S3Util')\n<<<<\norg.graalvm.polyglot.PolyglotException: TypeError: Access to host class co.cobre.lib.qa.aws.S3Util is not allowed or does not exist.\n- <js>.:program(Unnamed:1)\n\nclasspath:acceptance\/test\/prueba-tecnica.feature:8","tags":["regression"],"executorName":"main","name":"Dado que se carga un archivo de recaudo con datos que contienen caracteres especiales, al procesarse el archivo se verificará la información y se persistirán en BD con el detalle del error","startTime":1752356450647,"refId":"[2.1:168]","endTime":1752356450651,"exampleData":{"clientCode":"TEST01","pathJsonFileSqsEvents":"src\/test\/java\/acceptance\/test\/","jsonFileSqsEvents":"queueEvent.json","currentFilePath":"src\/test\/java\/acceptance\/test\/","currentFileName":"recaudoTemplateCaracteresEspeciales.csv","newPathNewFile":"src\/test\/resources\/testFilesToUse\/","pathJsonDataWithExpectedInformation":"src\/test\/java\/acceptance\/test\/","jsonDataWithExpectedInformation":"respuestaEsperadaCaracteresEspeciales.json","noveltyStatus":"VALIDATED","registerTotal":"2","validationErrorNumber":"'2'","createdNumber":"'0'","page":"1","size":"2"},"exampleIndex":0}],"callDepth":0,"name":"sample karate test script","description":"","resultDate":"2025-07-12 04:40:50 p. m.","durationMillis":8.8079,"passedCount":0}